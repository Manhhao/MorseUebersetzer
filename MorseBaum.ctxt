#BlueJ class context
comment0.params=
comment0.target=MorseBaum()
comment1.params=morseCode\ buchstabe
comment1.target=void\ fuegeMorseCodeZuBaum(java.lang.String,\ java.lang.String)
comment1.text=\ \r\n\ Die\ Methode\ um\ den\ Morsecode\ dem\ Baum\ zu\ \u00FCbergeben.\ Funktioniert\ wie\ folgt\:\r\n\ Der\ Methode\ wird\ sowohl\ der\ Buchstabe\ des\ Morsecodes\ gegeben,\ als\ auch\ der\ Code\ selbst.\r\n\ Der\ Code\ wird\ nicht\ in\ den\ Knoten\ gespeichert,\ er\ wird\ lediglich\ genutzt\ um\ entlang\ des\ Weges\r\n\ zu\ gehen.\ Dabei\ ist\ links\ \=\ Punkt,\ rechts\ \=\ Strich.\ Der\ Buchstabe\ wird\ im\ Knoten\ gespeichert.\r\n\ Die\ Methode\ funktioniert\ nach\ dem\ Prinzip,\ jeden\ Buchstaben\ des\ Morsecodes\ einzeln\ anzusehen\ und\ dann\r\n\ zu\ entscheiden\ ob\ man\ links\ oder\ rechts\ weitergeht.\ Kommt\ man\ dabei\ an\ einen\ ung\u00FCltigen\ Knoten,\ wird\ ein\ neuer\ erstellt.\r\n\ Benutzt\ wird\ daf\u00FCr\ eine\ for-Schleife\ und\ der\ Java-Befehl\ String.substring(int\ beginIndex,\ int\ endIndex)\r\n\ Benutzte\ Hilfen\:\ https\://beginnersbook.com/2013/12/java-string-substring-method-example/\r\n
comment2.params=pMorseCode\ pBaum
comment2.target=java.lang.String\ uebersetzeSatz(java.lang.String,\ MorseBaum)
comment3.params=pNode\ pVal
comment3.target=Knoten\ preOrderSearch(Knoten,\ java.lang.String)
comment4.params=pText
comment4.target=java.lang.String\ encodeViaRelations(java.lang.String)
numComments=5
